import {ICreateCustomActionParams, SharingMode} from '@linkurious/rest-client';

import {IntegrationModel} from '../integration/IntegrationModel';

import {
  VendorModel,
  VendorAdminField,
  VendorField,
  BaseVendorModel,
  VendorStrategy
} from './vendorModel';

export class Vendor implements BaseVendorModel<VendorStrategy> {
  private readonly model: VendorModel;

  constructor(model: VendorModel) {
    this.model = model;
  }

  get adminFields(): VendorAdminField[] {
    return this.model.adminFields;
  }
  get description(): string {
    return this.model.description;
  }
  get detailsResponseFields(): VendorField[] | undefined {
    return this.model.detailsResponseFields;
  }
  get key(): string {
    return this.model.key;
  }
  get name(): string {
    return this.model.name;
  }
  get searchQueryFields(): VendorField[] {
    return this.model.searchQueryFields;
  }
  get searchResponseFields(): VendorField[] {
    return this.model.searchResponseFields;
  }
  get strategy(): VendorStrategy {
    return this.model.strategy;
  }
  get outputFields(): VendorField[] {
    return this.model.strategy === 'search'
      ? this.model.searchResponseFields
      : this.model.detailsResponseFields;
  }

  static getVendorByKey(key: string): Vendor {
    const vendor = VENDORS.find((v) => v.key === key);
    if (!vendor) {
      throw new Error(`Vendor with key ${key} not found`);
    }
    return vendor;
  }

  static getVendors(): Vendor[] {
    return VENDORS;
  }

  getCustomAction(integration: IntegrationModel, basePath: string): ICreateCustomActionParams {
    return {
      sourceKey: integration.sourceKey,
      name: `Fetch details from ${this.name}`,
      description: `Get getails from ${this.name} (action auto-generated by the thurd-party data plugin)`,
      urlTemplate: `{{baseURL}}plugins/${basePath}/?action=search&integrationId=${integration.id}&sourceKey=${integration.sourceKey}&itemId={{node}}`,
      sharing: SharingMode.SOURCE,
      sharedWithGroups: undefined
    };
  }
}

const VENDORS: Vendor[] = [
  new Vendor({
    key: 'dnb-company',
    name: 'Dun & Bradstreet - Company',
    strategy: 'search',
    description:
      'Search for companies! see <a target="_blank" href="https://google.com">details</a>',
    searchQueryFields: [
      {key: 'name', type: 'string', required: true},
      {key: 'legalType', type: 'string', required: false},
      {key: 'address', type: 'string'}
    ] as VendorField[],
    searchResponseFields: [
      {key: 'blacklisted', type: 'boolean'},
      {key: 'legalType', type: 'string'},
      {key: 'yearCreated', type: 'number'},
      {key: 'address', type: 'string'},
      {key: 'suspicious', type: 'boolean'}
    ] as VendorField[],
    adminFields: [
      {key: 'apiKey', name: 'API key', required: true},
      {key: 'test1', name: 'test lol', required: true, enum: ['a', 'b', 'c']}
    ]
  }),
  new Vendor({
    key: 'dnb',
    name: 'Dun & Bradstreet - People',
    strategy: 'searchAndDetails',
    description:
      'Search for people in the DnB "people" API, see <a target="_blank" href="https://google.com">details</a>',
    searchQueryFields: [
      {key: 'firstName', type: 'string', required: true},
      {key: 'lastName', type: 'string', required: true},
      {key: 'address', type: 'string'},
      {key: 'age', type: 'number'},
      {key: 'suspicious', type: 'boolean'}
    ] as VendorField[],
    searchResponseFields: [
      {key: 'firstName', type: 'string'},
      {key: 'lastName', type: 'string'},
      {key: 'address', type: 'string'},
      {key: 'age', type: 'number'},
      {key: 'suspicious', type: 'boolean'}
    ] as VendorField[],
    detailsResponseFields: [
      {key: 'citizenship', type: 'string'},
      {key: 'fullName', type: 'string'},
      {key: 'address', type: 'string'},
      {key: 'listed', type: 'boolean'},
      {key: 'income', type: 'number'}
    ] as VendorField[],
    adminFields: [
      {key: 'apiKey', name: 'API key', required: true},
      {key: 'test1', name: 'test value', required: false},
      {key: 'test2', name: 'test choice', required: true, enum: ['yes', 'no']},
      {key: 'test3', name: 'test preference', required: false, enum: ['a', 'b', 'c']}
    ]
  })
];
